from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import state
from parse import *

from . app import dp, bot

async def write_to_worker(state : FSMContext):
    async with state.proxy() as data:
        idx = data['idx']
        description = data['description']
        deadline = data['deadline']
        worker_id = data['worker']
        initiator_id = data['initiator']
        worker = data['worker_username']
        creator = data['creator_username']

    try:
        await bot.send_message(worker_id, f"""
üëã –í–∞–º –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞:

–ù–æ–º–µ—Ä: {idx}
–û–ø–∏—Å–∞–Ω–∏–µ: {description}
–î–µ–¥–ª–∞–π–Ω: {deadline}
–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @{worker}
–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∏–π: @{creator}
    """
        )
        await bot.send_message(initiator_id, f"""
–ù–æ–º–µ—Ä: {idx}
–û–ø–∏—Å–∞–Ω–∏–µ: {description}
–î–µ–¥–ª–∞–π–Ω: {deadline}
–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @{worker}
–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∏–π: @{creator}
    """
    )
    except:
        await bot.send_message(initiator_id, f"üôâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{worker} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–µ –º–æ–≥—É —É–≤–µ–¥–æ–º–∏—Ç—å –µ–≥–æ")


async def task_closed_by_creator(state : FSMContext):
    async with state.proxy() as data:
        idx = data['idx']
        description = data['description']
        deadline = data['deadline']
        worker_id = data['worker']
        creator_id = data['creator']
        worker = data['worker_username']
        creator = data['creator_username']


    try:
        await bot.send_message(worker, f"""
üëè –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!

–ù–æ–º–µ—Ä: {idx}
–û–ø–∏—Å–∞–Ω–∏–µ: {description}
–î–µ–¥–ª–∞–π–Ω: {deadline}
–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @{worker}
–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∏–π: @{creator}
    """
        )
        await bot.send_message(creator_id, f"""
@{worker} –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ üåà
    """
    )
    except:
        await bot.send_message(creator_id, f"üôâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{worker} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–µ –º–æ–≥—É —É–≤–µ–¥–æ–º–∏—Ç—å –µ–≥–æ")


async def task_closed_by_worker(state : FSMContext):
    async with state.proxy() as data:
        idx = data['idx']
        description = data['description']
        deadline = data['deadline']
        worker_id = data['worker']
        creator_id = data['creator']
        worker = data['worker_username']
        creator = data['creator_username']


    try:
        await bot.send_message(creator_id, f"""
üëè –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!

–ù–æ–º–µ—Ä: {idx}
–û–ø–∏—Å–∞–Ω–∏–µ: {description}
–î–µ–¥–ª–∞–π–Ω: {deadline}
–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @{worker}
–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∏–π: @{creator}
    """
        )
        await bot.send_message(worker_id, f"""
@{creator} –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ üåà 
    """
    )
    except:
        await bot.send_message(worker_id, f"üôâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{creator} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–µ –º–æ–≥—É —É–≤–µ–¥–æ–º–∏—Ç—å –µ–≥–æ")

